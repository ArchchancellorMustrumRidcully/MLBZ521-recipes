<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Description</key>
	<string>Downloads and packages the latest patch of AutoCAD based supplied "major_version."

major_version examples:  2020, 2019, 2018, etc</string>
    <key>Identifier</key>
    <string>com.github.mlbz521.pkg.AutoCADPatch</string>
    <key>Input</key>
    <dict>
        <key>NAME</key>
        <string>AutoCAD Patch</string>
    </dict>
	<key>ParentRecipe</key>
	<string>com.github.mlbz521.download.AutoCADPatch</string>
    <key>Process</key>
    <array>
        <dict>
            <key>Processor</key>
            <string>PkgRootCreator</string>
            <key>Arguments</key>
            <dict>
                <key>pkgdirs</key>
                <dict/>
                <key>pkgroot</key>
                <string>%RECIPE_CACHE_DIR%/pkgroot</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>PkgRootCreator</string>
            <key>Arguments</key>
            <dict>
                <key>pkgdirs</key>
                <dict/>
                <key>pkgroot</key>
                <string>%RECIPE_CACHE_DIR%/Scripts</string>
            </dict>
        </dict>
		<dict>
			<key>Processor</key>
			<string>Copier</string>
			<key>Arguments</key>
			<dict>
				<key>source_path</key>
				<string>%pathname%/*.pkg</string>
				<key>destination_path</key>
				<string>%RECIPE_CACHE_DIR%/%NAME%.pkg</string>
			</dict>
		</dict>
		<dict>
			<key>Processor</key>
			<string>FlatPkgUnpacker</string>
			<key>Arguments</key>
			<dict>
				<key>flat_pkg_path</key>
				<string>%RECIPE_CACHE_DIR%/%NAME%.pkg</string>
				<key>destination_path</key>
				<string>%RECIPE_CACHE_DIR%/extract</string>
			</dict>
		</dict>
		<dict>
			<key>Processor</key>
			<string>FileFinder</string>
			<key>Arguments</key>
			<dict>
				<key>pattern</key>
				<string>%RECIPE_CACHE_DIR%/extract/autocad*.pkg/Scripts/VerTarget.plist</string>
			</dict>
		</dict>
		<dict>
			<key>Processor</key>
			<string>Versioner</string>
			<key>Arguments</key>
			<dict>
				<key>input_plist_path</key>
				<string>%found_filename%</string>
				<key>plist_version_key</key>
				<string>UpdateVersion</string>
			</dict>
		</dict>
		<dict>
			<key>Processor</key>
			<string>FileMover</string>
			<key>Arguments</key>
			<dict>
				<key>source</key>
				<string>%RECIPE_CACHE_DIR%/%NAME%.pkg</string>
				<key>target</key>
				<string>%RECIPE_CACHE_DIR%/Scripts/%NAME%.pkg</string>
			</dict>
		</dict>
		<dict>
			<key>Processor</key>
			<string>FileMover</string>
			<key>Arguments</key>
			<dict>
				<key>source</key>
				<string>%found_filename%</string>
				<key>target</key>
				<string>%RECIPE_CACHE_DIR%/Scripts/VerTarget.plist</string>
			</dict>
		</dict>
        <dict>
            <key>Processor</key>
            <string>FileCreator</string>
            <key>Arguments</key>
            <dict>
                <key>file_content</key>
                <string>#!/bin/bash

###################################################################################################
# Script Name:  update_AutoCAD.sh
# By:  Zack Thompson / Created:  4/2/2018
# Version:  1.1.0 / Updated:  4/14/2020 / By:  ZT
#
# Description:  This script will update an AutoCAD install.
#
###################################################################################################

echo "*****  Update AutoCAD process:  START  *****"

##################################################
# Define Variables

# Set working directory
pkgDir=$( /usr/bin/dirname "${0}" )
compatible="false"

# Get the filename of the .pkg file
pkg=$( /bin/ls "${pkgDir}" | /usr/bin/grep .pkg )

# Get Configuration details...
targetAppName=$( /usr/bin/defaults read "${pkgDir}/VerTarget.plist" TargetAppName )
newVersion=$( /usr/bin/defaults read "${pkgDir}/VerTarget.plist" UpdateVersion )
versionsToPatch=$( /bin/cat "${pkgDir}/VerTarget.plist" | /usr/bin/xmllint --format - | /usr/bin/xpath '/plist/dict/array/string' 2&gt;/dev/null | LANG=C /usr/bin/sed -e 's/&lt;[^/&gt;]*&gt;//g' | LANG=C /usr/bin/sed -e 's/&lt;[^&gt;]*&gt;/\'$'\n/g' )
tmp_folder="/private/tmp/_adsk_${newVersion}"

##################################################
# Bits staged...

# Find the AutoCAD version being updated...
echo "Searching for ${targetAppName}..."
appPath=$( /usr/bin/find -E /Applications -iregex ".*[/]${targetAppName}[.]app" -type d -prune )

if [[ -z "${appPath}" ]]; then
	echo "Unable to locate an AutoCAD application in the expected location!"
	echo "*****  Update AutoCAD process:  FAILED  *****"
	exit 1
else
	# Get the App Bundle name...
	appName=$( echo "${appPath}" | /usr/bin/awk -F "/" '{print $NF}' )

	# Get only the install path...
	installPath=$( echo "${appPath}" | /usr/bin/awk -F "/${appName}" '{print $1}' )

	# Get the Current Version CFBundleVersion...
	oldBundleVersion=$( /usr/bin/defaults read "${appPath}/Contents/Info.plist" CFBundleVersion )
fi

# Check if patch version is the current version.
if [[ "${newVersion}" == "${oldBundleVersion}" ]]; then
	echo "AutoCAD is already up to date!"
	echo "*****  Update AutoCAD process:  COMPLETE  *****"
	exit 0
fi

echo "App Path:  ${appPath}"
echo "Current Version:  ${oldBundleVersion}"
echo "Patch Version:  ${newVersion}"

# Verify that this patch is compatible with this version.
while IFS=\n read -r versionPatch; do
	if [[ "${versionPatch}" == "${oldBundleVersion}" ]]; then
		echo "${newVersion} is a valid patch for:  ${oldBundleVersion}"
		compatible="true"
	fi
done &lt; &lt;( /usr/bin/printf '%s\n' "${versionsToPatch}" )

# If compatible, install, if not error out.
if [[ $compatible == "true" ]]; then

	# Silliness that is only performed when running the installer via the GUI
	# Credit to @Lincolnep (https://www.jamf.com/jamf-nation/discussions/34668/deploying-autocad-2020-using-script#responseChild199660)
	if [[ ! -d "${tmp_folder}" ]]; then
		/bin/mkdir -p "${tmp_folder}"
	fi

	/bin/ln -s "${appPath}" "${tmp_folder}/acupdt_rone"

	echo "Installing patch..."
	exitStatus=$( /usr/sbin/installer -dumplog -verbose -pkg "${pkgDir}/${pkg}" -target / )
	exitCode=$?

else
	echo "ERROR:  This patch is not compatible with the installed version!"
	echo "*****  Update AutoCAD process:  FAILED  *****"
	exit 2
fi

# Get the new CFBundleVersion...
newBundleVersion=$( /usr/bin/defaults read "${appPath}/Contents/Info.plist" CFBundleVersion )

# Confirm a successful update
if [[ $exitCode != 0 || "${newVersion}" != "${newBundleVersion}" ]]; then
	echo "ERROR:  Update failed!"
	echo "Exit Code:  ${exitCode}"
	echo "Exit status was:  ${exitStatus}"
	echo "*****  Update AutoCAD process:  FAILED  *****"
	exit 3
fi

echo "*****  Update AutoCAD process:  COMPLETE  *****"
exit 0</string>
                <key>file_mode</key>
                <string>0755</string>
                <key>file_path</key>
                <string>%RECIPE_CACHE_DIR%/Scripts/postinstall</string>
            </dict>
        </dict>
		<dict>
			<key>Processor</key>
			<string>PkgCreator</string>
			<key>Arguments</key>
			<dict>
				<key>pkg_request</key>
				<dict>
					<key>id</key>
					<string>com.autodesk.autocad.patch%version%</string>
					<key>pkgname</key>
					<string>AutoCAD %MAJOR_VERSION% Patch-%version%</string>
                    <key>pkgroot</key>
                    <string>%RECIPE_CACHE_DIR%/pkgroot</string>
					<key>pkgtype</key>
					<string>flat</string>
					<key>scripts</key>
					<string>Scripts</string>
					<key>version</key>
					<string>%version%</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>Processor</key>
			<string>PathDeleter</string>
			<key>Arguments</key>
			<dict>
				<key>path_list</key>
				<array>
					<string>%RECIPE_CACHE_DIR%/extract</string>
					<string>%RECIPE_CACHE_DIR%/Scripts</string>
				</array>
			</dict>
		</dict>
    </array>
</dict>
</plist>
